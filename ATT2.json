[
  {
    "label": "CAN Bus Injection",
    "aliases": [
      "can bus",
      "controller area network",
      "can bus attack",
      "bus injection"
    ],
    "prompt": "Generate an attack tree for the CAN Bus Injection in a modern automotive system. The root node should represent a successful compromise of the can bus injection.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to can bus injection protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include can bus injection-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the can bus injection, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the can bus injection, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Infotainment System",
    "aliases": [
      "infotainment system",
      "infotainment_system"
    ],
    "prompt": "Generate an attack tree for the Infotainment System in a modern automotive system. The root node should represent a successful compromise of the infotainment system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to infotainment system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include infotainment system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the infotainment system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the infotainment system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "OBD-II Port",
    "aliases": [
      "obd-ii port",
      "obd-ii_port"
    ],
    "prompt": "Generate an attack tree for the OBD-II Port in a modern automotive system. The root node should represent a successful compromise of the obd-ii port.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to obd-ii port protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include obd-ii port-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the obd-ii port, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the obd-ii port, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "ECU Firmware",
    "aliases": [
      "ecu firmware",
      "ecu_firmware"
    ],
    "prompt": "Generate an attack tree for the ECU Firmware in a modern automotive system. The root node should represent a successful compromise of the ecu firmware.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to ecu firmware protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include ecu firmware-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the ecu firmware, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the ecu firmware, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Bluetooth Interface",
    "aliases": [
      "bluetooth interface",
      "bluetooth_interface"
    ],
    "prompt": "Generate an attack tree for the Bluetooth Interface in a modern automotive system. The root node should represent a successful compromise of the bluetooth interface.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to bluetooth interface protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include bluetooth interface-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the bluetooth interface, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the bluetooth interface, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Wi-Fi Module",
    "aliases": [
      "wi-fi module",
      "wi-fi_module"
    ],
    "prompt": "Generate an attack tree for the Wi-Fi Module in a modern automotive system. The root node should represent a successful compromise of the wi-fi module.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to wi-fi module protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include wi-fi module-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the wi-fi module, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the wi-fi module, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Telematics Control Unit",
    "aliases": [
      "telematics control unit",
      "telematics_control_unit"
    ],
    "prompt": "Generate an attack tree for the Telematics Control Unit in a modern automotive system. The root node should represent a successful compromise of the telematics control unit.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to telematics control unit protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include telematics control unit-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the telematics control unit, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the telematics control unit, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Vehicle-to-Vehicle (V2V)",
    "aliases": [
      "vehicle-to-vehicle (v2v)",
      "vehicle-to-vehicle_(v2v)"
    ],
    "prompt": "Generate an attack tree for the Vehicle-to-Vehicle (V2V) in a modern automotive system. The root node should represent a successful compromise of the vehicle-to-vehicle (v2v).\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to vehicle-to-vehicle (v2v) protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include vehicle-to-vehicle (v2v)-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the vehicle-to-vehicle (v2v), such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the vehicle-to-vehicle (v2v), such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Vehicle-to-Infrastructure (V2I)",
    "aliases": [
      "vehicle-to-infrastructure (v2i)",
      "vehicle-to-infrastructure_(v2i)"
    ],
    "prompt": "Generate an attack tree for the Vehicle-to-Infrastructure (V2I) in a modern automotive system. The root node should represent a successful compromise of the vehicle-to-infrastructure (v2i).\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to vehicle-to-infrastructure (v2i) protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include vehicle-to-infrastructure (v2i)-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the vehicle-to-infrastructure (v2i), such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the vehicle-to-infrastructure (v2i), such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "GPS Spoofing",
    "aliases": [
      "gps spoofing",
      "gps_spoofing"
    ],
    "prompt": "Generate an attack tree for the GPS Spoofing in a modern automotive system. The root node should represent a successful compromise of the gps spoofing.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to gps spoofing protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include gps spoofing-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the gps spoofing, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the gps spoofing, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "ADAS Sensors",
    "aliases": [
      "adas sensors",
      "adas_sensors"
    ],
    "prompt": "Generate an attack tree for the ADAS Sensors in a modern automotive system. The root node should represent a successful compromise of the adas sensors.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to adas sensors protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include adas sensors-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the adas sensors, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the adas sensors, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Lidar System",
    "aliases": [
      "lidar system",
      "lidar_system"
    ],
    "prompt": "Generate an attack tree for the Lidar System in a modern automotive system. The root node should represent a successful compromise of the lidar system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to lidar system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include lidar system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the lidar system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the lidar system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Radar System",
    "aliases": [
      "radar system",
      "radar_system"
    ],
    "prompt": "Generate an attack tree for the Radar System in a modern automotive system. The root node should represent a successful compromise of the radar system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to radar system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include radar system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the radar system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the radar system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Camera System",
    "aliases": [
      "camera system",
      "camera_system"
    ],
    "prompt": "Generate an attack tree for the Camera System in a modern automotive system. The root node should represent a successful compromise of the camera system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to camera system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include camera system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the camera system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the camera system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "TPMS",
    "aliases": [
      "tpms",
      "tpms"
    ],
    "prompt": "Generate an attack tree for the TPMS in a modern automotive system. The root node should represent a successful compromise of the tpms.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to tpms protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include tpms-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the tpms, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the tpms, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Vehicle Mobile App",
    "aliases": [
      "vehicle mobile app",
      "vehicle_mobile_app"
    ],
    "prompt": "Generate an attack tree for the Vehicle Mobile App in a modern automotive system. The root node should represent a successful compromise of the vehicle mobile app.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to vehicle mobile app protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include vehicle mobile app-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the vehicle mobile app, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the vehicle mobile app, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Cloud Services",
    "aliases": [
      "cloud services",
      "cloud_services"
    ],
    "prompt": "Generate an attack tree for the Cloud Services in a modern automotive system. The root node should represent a successful compromise of the cloud services.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to cloud services protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include cloud services-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the cloud services, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the cloud services, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Key Fob",
    "aliases": [
      "key fob",
      "key_fob"
    ],
    "prompt": "Generate an attack tree for the Key Fob in a modern automotive system. The root node should represent a successful compromise of the key fob.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to key fob protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include key fob-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the key fob, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the key fob, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "RFID Entry",
    "aliases": [
      "rfid entry",
      "rfid_entry"
    ],
    "prompt": "Generate an attack tree for the RFID Entry in a modern automotive system. The root node should represent a successful compromise of the rfid entry.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to rfid entry protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include rfid entry-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the rfid entry, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the rfid entry, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Immobilizer",
    "aliases": [
      "immobilizer",
      "immobilizer"
    ],
    "prompt": "Generate an attack tree for the Immobilizer in a modern automotive system. The root node should represent a successful compromise of the immobilizer.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to immobilizer protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include immobilizer-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the immobilizer, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the immobilizer, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "In-Vehicle Network",
    "aliases": [
      "in-vehicle network",
      "in-vehicle_network"
    ],
    "prompt": "Generate an attack tree for the In-Vehicle Network in a modern automotive system. The root node should represent a successful compromise of the in-vehicle network.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to in-vehicle network protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include in-vehicle network-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the in-vehicle network, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the in-vehicle network, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "IVI System",
    "aliases": [
      "ivi system",
      "ivi_system"
    ],
    "prompt": "Generate an attack tree for the IVI System in a modern automotive system. The root node should represent a successful compromise of the ivi system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to ivi system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include ivi system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the ivi system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the ivi system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Head Unit",
    "aliases": [
      "head unit",
      "head_unit"
    ],
    "prompt": "Generate an attack tree for the Head Unit in a modern automotive system. The root node should represent a successful compromise of the head unit.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to head unit protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include head unit-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the head unit, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the head unit, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "HMI Interface",
    "aliases": [
      "hmi interface",
      "hmi_interface"
    ],
    "prompt": "Generate an attack tree for the HMI Interface in a modern automotive system. The root node should represent a successful compromise of the hmi interface.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to hmi interface protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include hmi interface-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the hmi interface, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the hmi interface, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Mobile Device Integration",
    "aliases": [
      "mobile device integration",
      "mobile_device_integration"
    ],
    "prompt": "Generate an attack tree for the Mobile Device Integration in a modern automotive system. The root node should represent a successful compromise of the mobile device integration.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to mobile device integration protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include mobile device integration-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the mobile device integration, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the mobile device integration, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Diagnostic Tools",
    "aliases": [
      "diagnostic tools",
      "diagnostic_tools"
    ],
    "prompt": "Generate an attack tree for the Diagnostic Tools in a modern automotive system. The root node should represent a successful compromise of the diagnostic tools.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to diagnostic tools protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include diagnostic tools-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the diagnostic tools, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the diagnostic tools, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "OTA Updates",
    "aliases": [
      "ota updates",
      "ota_updates"
    ],
    "prompt": "Generate an attack tree for the OTA Updates in a modern automotive system. The root node should represent a successful compromise of the ota updates.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to ota updates protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include ota updates-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the ota updates, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the ota updates, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Cellular Module",
    "aliases": [
      "cellular module",
      "cellular_module"
    ],
    "prompt": "Generate an attack tree for the Cellular Module in a modern automotive system. The root node should represent a successful compromise of the cellular module.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to cellular module protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include cellular module-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the cellular module, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the cellular module, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "CAN Gateway",
    "aliases": [
      "can gateway",
      "can_gateway"
    ],
    "prompt": "Generate an attack tree for the CAN Gateway in a modern automotive system. The root node should represent a successful compromise of the can gateway.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to can gateway protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include can gateway-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the can gateway, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the can gateway, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "LIN Bus",
    "aliases": [
      "lin bus",
      "lin_bus"
    ],
    "prompt": "Generate an attack tree for the LIN Bus in a modern automotive system. The root node should represent a successful compromise of the lin bus.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to lin bus protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include lin bus-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the lin bus, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the lin bus, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "FlexRay",
    "aliases": [
      "flexray",
      "flexray"
    ],
    "prompt": "Generate an attack tree for the FlexRay in a modern automotive system. The root node should represent a successful compromise of the flexray.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to flexray protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include flexray-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the flexray, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the flexray, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Zonal ECU",
    "aliases": [
      "zonal ecu",
      "zonal_ecu"
    ],
    "prompt": "Generate an attack tree for the Zonal ECU in a modern automotive system. The root node should represent a successful compromise of the zonal ecu.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to zonal ecu protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include zonal ecu-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the zonal ecu, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the zonal ecu, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Sensor Fusion Module",
    "aliases": [
      "sensor fusion module",
      "sensor_fusion_module"
    ],
    "prompt": "Generate an attack tree for the Sensor Fusion Module in a modern automotive system. The root node should represent a successful compromise of the sensor fusion module.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to sensor fusion module protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include sensor fusion module-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the sensor fusion module, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the sensor fusion module, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Brake Control System",
    "aliases": [
      "brake control system",
      "brake_control_system"
    ],
    "prompt": "Generate an attack tree for the Brake Control System in a modern automotive system. The root node should represent a successful compromise of the brake control system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to brake control system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include brake control system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the brake control system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the brake control system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Throttle Control",
    "aliases": [
      "throttle control",
      "throttle_control"
    ],
    "prompt": "Generate an attack tree for the Throttle Control in a modern automotive system. The root node should represent a successful compromise of the throttle control.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to throttle control protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include throttle control-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the throttle control, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the throttle control, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Powertrain Control Module",
    "aliases": [
      "powertrain control module",
      "powertrain_control_module"
    ],
    "prompt": "Generate an attack tree for the Powertrain Control Module in a modern automotive system. The root node should represent a successful compromise of the powertrain control module.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to powertrain control module protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include powertrain control module-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the powertrain control module, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the powertrain control module, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "HVAC Module",
    "aliases": [
      "hvac module",
      "hvac_module"
    ],
    "prompt": "Generate an attack tree for the HVAC Module in a modern automotive system. The root node should represent a successful compromise of the hvac module.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to hvac module protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include hvac module-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the hvac module, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the hvac module, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Steering ECU",
    "aliases": [
      "steering ecu",
      "steering_ecu"
    ],
    "prompt": "Generate an attack tree for the Steering ECU in a modern automotive system. The root node should represent a successful compromise of the steering ecu.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to steering ecu protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include steering ecu-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the steering ecu, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the steering ecu, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Battery Management System",
    "aliases": [
      "battery management system",
      "battery_management_system"
    ],
    "prompt": "Generate an attack tree for the Battery Management System in a modern automotive system. The root node should represent a successful compromise of the battery management system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to battery management system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include battery management system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the battery management system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the battery management system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Charging Port",
    "aliases": [
      "charging port",
      "charging_port"
    ],
    "prompt": "Generate an attack tree for the Charging Port in a modern automotive system. The root node should represent a successful compromise of the charging port.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to charging port protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include charging port-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the charging port, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the charging port, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "ADAS ECU",
    "aliases": [
      "adas ecu",
      "adas_ecu"
    ],
    "prompt": "Generate an attack tree for the ADAS ECU in a modern automotive system. The root node should represent a successful compromise of the adas ecu.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to adas ecu protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include adas ecu-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the adas ecu, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the adas ecu, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Remote Control App",
    "aliases": [
      "remote control app",
      "remote_control_app"
    ],
    "prompt": "Generate an attack tree for the Remote Control App in a modern automotive system. The root node should represent a successful compromise of the remote control app.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to remote control app protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include remote control app-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the remote control app, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the remote control app, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Voice Assistant Integration",
    "aliases": [
      "voice assistant integration",
      "voice_assistant_integration"
    ],
    "prompt": "Generate an attack tree for the Voice Assistant Integration in a modern automotive system. The root node should represent a successful compromise of the voice assistant integration.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to voice assistant integration protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include voice assistant integration-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the voice assistant integration, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the voice assistant integration, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Digital Cockpit",
    "aliases": [
      "digital cockpit",
      "digital_cockpit"
    ],
    "prompt": "Generate an attack tree for the Digital Cockpit in a modern automotive system. The root node should represent a successful compromise of the digital cockpit.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to digital cockpit protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include digital cockpit-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the digital cockpit, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the digital cockpit, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "USB Interface",
    "aliases": [
      "usb interface",
      "usb_interface"
    ],
    "prompt": "Generate an attack tree for the USB Interface in a modern automotive system. The root node should represent a successful compromise of the usb interface.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to usb interface protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include usb interface-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the usb interface, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the usb interface, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "HDMI Port",
    "aliases": [
      "hdmi port",
      "hdmi_port"
    ],
    "prompt": "Generate an attack tree for the HDMI Port in a modern automotive system. The root node should represent a successful compromise of the hdmi port.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to hdmi port protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include hdmi port-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the hdmi port, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the hdmi port, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Media Player Interface",
    "aliases": [
      "media player interface",
      "media_player_interface"
    ],
    "prompt": "Generate an attack tree for the Media Player Interface in a modern automotive system. The root node should represent a successful compromise of the media player interface.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to media player interface protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include media player interface-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the media player interface, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the media player interface, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "E-call System",
    "aliases": [
      "e-call system",
      "e-call_system"
    ],
    "prompt": "Generate an attack tree for the E-call System in a modern automotive system. The root node should represent a successful compromise of the e-call system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to e-call system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include e-call system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the e-call system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the e-call system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Telematics Cloud API",
    "aliases": [
      "telematics cloud api",
      "telematics_cloud_api"
    ],
    "prompt": "Generate an attack tree for the Telematics Cloud API in a modern automotive system. The root node should represent a successful compromise of the telematics cloud api.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to telematics cloud api protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include telematics cloud api-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the telematics cloud api, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the telematics cloud api, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Vehicle Configuration API",
    "aliases": [
      "vehicle configuration api",
      "vehicle_configuration_api"
    ],
    "prompt": "Generate an attack tree for the Vehicle Configuration API in a modern automotive system. The root node should represent a successful compromise of the vehicle configuration api.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to vehicle configuration api protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include vehicle configuration api-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the vehicle configuration api, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the vehicle configuration api, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "EV Charger Communication",
    "aliases": [
      "ev charger communication",
      "ev_charger_communication"
    ],
    "prompt": "Generate an attack tree for the EV Charger Communication in a modern automotive system. The root node should represent a successful compromise of the ev charger communication.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to ev charger communication protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include ev charger communication-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the ev charger communication, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the ev charger communication, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  },
  {
    "label": "Smart Key System",
    "aliases": [
      "smart key system",
      "smart_key_system"
    ],
    "prompt": "Generate an attack tree for the Smart Key System in a modern automotive system. The root node should represent a successful compromise of the smart key system.\n\nThe first level of branches should include:\n- 'Entry Point Exploitation',\n- 'Privilege Escalation',\n- 'Denial of Service',\n- 'Data Exfiltration',\n- 'Firmware Manipulation'.\n\nUse Mermaid format with 'graph TD' syntax.\n\nFor each branch, expand with at least two sub-branches on the second level, and for each of those sub-branches, add at least two further sub-branches on the third level, resulting in a three-level hierarchy in total.\n\nSpecifically:\n\n- For 'Entry Point Exploitation', include domain-specific vectors such as vulnerabilities related to smart key system protocols, interfaces, or user interactions. Expand with realistic attack paths like 'Protocol Misuse', 'Interface Abuse', or 'User Trickery'.\n\n- For 'Privilege Escalation', include vectors such as 'Misconfigured Permissions' and 'Backdoor Access'. Expand with attack paths like 'Hardcoded Credentials', 'Privilege Creep', or 'Unvalidated Access'.\n\n- For 'Denial of Service', include smart key system-specific overloads or fault injection such as 'Message Flooding', 'Crash Triggering', or 'Buffer Overrun'.\n\n- For 'Data Exfiltration', focus on sensitive data handled by the smart key system, such as credentials, telemetry, user data, or internal messages. Include 'Log Dumping', 'Session Hijack', or 'Man-in-the-Middle'.\n\n- For 'Firmware Manipulation', focus on update processes or executable payloads associated with the smart key system, such as 'Tampered Update File', 'Rollback Attack', or 'Malicious Binary Injection'.\n\nMake sure none of the sub-branches or their expansions overlap in terms of attack techniques or concepts.\n\nOutput the full attack tree only in valid Mermaid syntax, wrapped in triple backticks like:\n\n```mermaid\ngraph TD"
  }
]